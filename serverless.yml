# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambda-go-R
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: go1.x

  environment:
      DB_USER: "yairsggo"
      DB_PASS: "MbuwvGgJcC-nXskeCQnhunp8C93XC2-p"
      DB_HOST: "rajje.db.elephantsql.com"
      DB_PORT: 5432
      DB_SERVICE: "yairsggo"
      DB_SCHEMA: "yairsggo"
      IS_DEBUG_SQL: true
      API_KEY: "B5d4JtTU8u1ggV8gp7OF88gcCGxZls6T3f5PYZSa"
      URL_CREATE_USER: "https://9dowju0rd0.execute-api.us-east-1.amazonaws.com/dev/main/create"
      URL_CHECK_PHONE: "https://1g1zcrwqhj.execute-api.ap-southeast-1.amazonaws.com/dev/testapi"
      SECRET_KEY: "golang"

custom:
  apiKeys:
    dev:
    - name: baitap3
      usagePlan:
        name: "baitap3" 
        description: "Description of first plan"
        quota:
          limit: 100000
          period: MONTH
        throttle:
          burstLimit: 100
          rateLimit: 20
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  create:
    handler: bin/create
    package:
      include:
        - ./bin/create
    events:
      - http:
          path: /main/create
          method: post
          cors: true
  checkphone:
      handler: bin/checkphone
      package:
        include:
          - ./bin/checkphone
      events:
        - http:
            path: /main/checkphone
            method: post
            cors: true
  # list:
  #   handler: bin/list
  #   package:
  #     include:
  #       - ./bin/list
  #   events:
  #     - http:
  #         path: /main/list
  #         method: get
  #         cors: true

  # get:
  #   handler: bin/get
  #   package:
  #     include:
  #       - ./bin/get
  #   events:
  #     - http:
  #         path: /main/list/{id}
  #         method: get
  #         cors: true

  # update:
  #   handler: bin/update
  #   package:
  #     include:
  #       - ./bin/update
  #   events:
  #     - http:
  #         path: /main/update/{id}
  #         method: put
  #         cors: true

  # delete:
  #   handler: bin/delete
  #   package:
  #     include:
  #       - ./bin/deleteBin
  #   events:
  #     - http:
  #         path: /main/delete/{id}
  #         method: delete
  #         cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
